import 'dart:convert';

import 'package:cloud_firestore/cloud_firestore.dart';

class Firestore {
  // just a simple get
  static Future<List<Car>> getAllEntries(String collection) async {
    return (await FirebaseFirestore.instance.collection(collection).get())
        .docs
        .map((item) => Car.fromMap(item.data()))
        .toList();
  }

  // get with custom order
  static Future<List<Car>> getAllEntriesSortedByName(String collection) async {
    return (await FirebaseFirestore.instance
            .collection(collection)
            .orderBy("manufacturer", descending: false)
            .get())
        .docs
        .map((item) => Car.fromMap(item.data()))
        .toList();
  }

  // get with filter
  static Future<List<Car>> getAllEntriesFilteredByPrice(
      String collection) async {
    return (await FirebaseFirestore.instance
            .collection(collection)
            .where("price", isGreaterThan: 60000)
            .get())
        .docs
        .map((item) => Car.fromMap(item.data()))
        .toList();
  }

  static Future addEntryWithAutogeneratedId(
      String collection, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance.collection(collection).add(data);
  }

  // updates an existing entry (missing fields won't be touched on update), document must exist
  static Future updateEntryWithId(
      String collection, String documentId, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .update(data);
  }

  // adds or updates an existing entry (missing fields will be deleted on update!), document will be created if needed
  static Future addOrUpdateWithId(
      String collection, String documentId, Map<String, dynamic> data) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .set(data);
  }

  // deletes the entry with the given document id
  static Future deleteEntry(String collection, String documentId) async {
    await FirebaseFirestore.instance
        .collection(collection)
        .doc(documentId)
        .delete();
  }
}

class Car {
  Car({
    this.engine,
    required this.manufacturer,
    required this.price,
  });

  final Engine? engine;
  final String manufacturer;
  final int price;

  factory Car.fromJson(String str) => Car.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Car.fromMap(Map<String, dynamic> json) => Car(
        engine: json["engine"] == null ? null : Engine.fromMap(json["engine"]),
        manufacturer: json["manufacturer"],
        price: json["price"],
      );

  Map<String, dynamic> toMap() => {
        "engine": engine == null ? null : engine!.toMap(),
        "manufacturer": manufacturer,
        "price": price,
      };

  @override
  String toString() {
    return "$manufacturer ($priceâ‚¬), ${engine!.cylinders} cylinders, ${engine!.horsePower} hp!";
  }
}

class Engine {
  Engine({
    required this.horsePower,
    required this.cylinders,
  });

  final int horsePower;
  final int cylinders;

  factory Engine.fromJson(String str) => Engine.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Engine.fromMap(Map<String, dynamic> json) => Engine(
        horsePower: json["horse_power"],
        cylinders: json["cylinders"],
      );

  Map<String, dynamic> toMap() => {
        "horse_power": horsePower,
        "cylinders": cylinders,
      };
}
